desc: Tests that manipulation data in tables
tests:

    # Set up some data
    - cd: r.db('test').table_create('test')
      ot: ({'created':1})
      def: tbl = r.db('test').table('test')

    - cd: r.db('test').table_create('test2')
      ot: ({'created':1})
      def: tbl2 = r.db('test').table('test2')

    - py: tbl.insert([{'id':i, 'a':i%4} for i in xrange(100)])
      js: |
        tbl.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i, 'a':i%4});
            }
            return res;
        }())
      rb: tbl.insert((1..100).map{ |i| { :id => i, :a => i % 4 } })
      ot: ({'inserted':100})

    - py: tbl2.insert([{'id':i, 'b':i%4} for i in xrange(100)])
      js: |
        tbl2.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i, 'b':i%4});
            }
            return res;
        }())
      rb: tbl2.insert((1..100).map{ |i| { :id => i, :b => i % 4 } })
      ot: ({'inserted':100})

    # Between
    - cd: tbl.between(20,29).count()
      ot: 10
    - cd: tbl.between(-10,9).count() 
      ot: 10
    - cd: tbl.between(80,2000).count()
      ot: 20
    - cd: tbl.between(-2000, 2000).count()
      ot: 100

    # Filter
    - py: tbl.filter(lambda row:row['a'] > 2).count()
      js: tbl.filter(function(row) { return row('a').gt(2); }).count()
      rb: tbl.filter{ |row| row[:a] > 2 }.count
      ot: 25

    # Map-Reduce
    - py:
        - tbl.map(lambda row:row['id']).reduce(lambda a,b:a+b)
        # Implicit var support buggy on CPP server
        #- tbl.map(r.row['id']).reduce(lambda a,b:a+b)
      js:
        - tbl.map(function(row) { return row('id'); }).reduce(function(a,b) { return a.add(b); })
        #- tbl.map(r.row('id')).reduce(function(a,b) { return a.add(b); })
      rb: tbl.map{ |row| row[:id] }.reduce{ |a, b| a + b }
      ot: 4950

    # Concat-map
    - py: tbl.concat_map(lambda row:[])
      js: tbl.concatMap(function(row) { return []; })
      rb: tbl.concat_map{ |row| [] }
      ot: ([])
    - def:
        py: ccm = tbl.concat_map(lambda row:[row['a'], (row['a'] + 1) % 4])
        js: ccm = tbl.concatMap(function(row) { return [row('a'), row('a').add(1).mod(4)]; })
        rb: ccm = tbl.concat_map{ |row| [row[:a], (row[:a] + 1) % 4] }
    - cd: ccm.count()
      ot: 200
    - py: ccm.reduce(lambda a,b:(a+b) % 4)
      js: ccm.reduce(function(a,b) { return a.add(b).mod(4); })
      rb: ccm.reduce{ |a, b| (a + b) % 4 }
      ot: 0

    # Order by
    - py: tbl.order_by('id')[0]
      js: tbl.orderBy('id').nth(0)
      rb: tbl.order_by(:id)[0]
      ot: ({'id':0, 'a':0})

    # Distinct
    - py: tbl.map(lambda row:row['a']).distinct().count()
      js: tbl.map(function(row) { return row('a'); }).distinct().count()
      rb: tbl.map{ |row| row[:a] }.distinct.count
      ot: 4

    # Union
    - cd: tbl.union(tbl2).count()
      ot: 200
    - cd: tbl.union([1,2,3]).count()
      ot: 103
    - cd: r.expr([1,2,3]).union(tbl2).count()
      ot: 103

    # Inner-Join
    - def:
        py: ij = tbl.inner_join(tbl2, lambda x,y:x['a'] == y['b']).zip()
        js: ij = tbl.innerJoin(tbl2, function(x, y) { return x('a').eq(y('b')); }).zip()
        rb: ij = tbl.inner_join(tbl2){ |x, y| x[:a].eq y[:b] }.zip
    - cd: ij.count()
      ot: 2500
    - py: ij.filter(lambda row:row['a'] != row['b']).count()
      js: ij.filter(function(row) { return row('a').ne(row('b')); }).count()
      rb: ij.filter{ |row| row[:a].ne row[:b] }.count
      ot: 0

    # Outer-Join
    - def:
        py: oj = tbl.outer_join(tbl2, lambda x,y:x['a'] == y['b']).zip()
        js: oj = tbl.outerJoin(tbl2, function(x, y) { return x('a').eq(y('b')); }).zip()
        rb: oj = tbl.outer_join(tbl2){ |x, y| x[:a].eq y[:b] }.zip
    - cd: oj.count()
      ot: 2500
    - py: oj.filter(lambda row:row['a'] != row['b']).count()
      js: oj.filter(function(row) { return row('a').ne(row('b')); }).count()
      rb: oj.filter{ |row| row[:a].ne row[:b] }
      ot: 0

    # Eq-Join
    - def: ej = tbl.eq_join('a', tbl2).zip()
      cd: ej.count()
      ot: 100

    # GMR
    - py: tbl.grouped_map_reduce(lambda row:row['a'], lambda row:row['id'], lambda a,b:a + b)
      rb: tbl.grouped_map_reduce { |row| row[:a] } { |row| row[:id] } { |a, b| a + b}
      js: |
        tbl.groupedMapReduce(function(row) {
            return row('a');
        }, function(row) {
            return row('id');
        }, function(a,b) {
            return a.add(b);
        }) 
      ot: |
          ([{'group':0, 'reduction':1200},
            {'group':1, 'reduction':1225},
            {'group':2, 'reduction':1250},
            {'group':3, 'reduction':1275}])

    # GroupBy

    # COUNT
    - cd: tbl.group_by(['a'], {'COUNT':True})
      ot: |
          ([{'group':[0], 'reduction':25},
            {'group':[1], 'reduction':25},
            {'group':[2], 'reduction':25},
            {'group':[3], 'reduction':25}])

    # SUM
    - cd: tbl.group_by(['a'], {'SUM':'id'})
      ot: |
          ([{'group':[0], 'reduction':1200},
            {'group':[1], 'reduction':1225},
            {'group':[2], 'reduction':1250},
            {'group':[3], 'reduction':1275}])

    # AVG
    - cd: tbl.group_by(['a'], {'AVG':'id'})
      ot: |
          ([{'group':[0], 'reduction':48},
            {'group':[1], 'reduction':49},
            {'group':[2], 'reduction':50},
            {'group':[3], 'reduction':51}])

    # Clean up
    - cd: r.db('test').table_drop('test')
      ot: ({'dropped':1})
    - cd: r.db('test').table_drop('test2')
      ot: ({'dropped':1})
