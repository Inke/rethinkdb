desc: Tests replacement of selections
tests:

    # Set up some data
    - cd: r.db('test').table_create('test')
      ot: ({'created':1})

    - def: tbl = r.db('test').table('test')

    - cd: r.db('test').table_create('test2')
      ot: ({'created':1})

    - def: tbl2 = r.db('test').table('test2')
      cd: []

    - py: tbl.insert([{'id':i} for i in xrange(100)])
      js: |
        tbl.insert(function(){
            var res = []
            for (var i = 0; i < 100; i++) {
                res.push({id:i});
            }
            return res;
        }())
      rb: tbl.insert((1..100).map{ |i| {:id => i } })
      ot: ({'inserted':100})

    - cd: tbl.count()
      ot: 100

    # Identity

    - py: tbl.get(12).replace(lambda row:{'id':row['id']})
      js: tbl.get(12).replace(function(row) { return {'id':row('id')}; })
      rb: tbl.get(12).replace{ |row| { :id => row[:id] } }
      ot: ({'unchanged':1})

    # Replace single row

    - py: tbl.get(12).replace(lambda row:{'id':row['id'], 'a':row['id']})
      js: tbl.get(12).replace(function(row) { return {'id':row('id'), 'a':row('id')}; })
      rb: tbl.get(12).replace{ |row| { :id => row[:id], :a => row[:id] } }
      ot: ({'replaced':1})

    - py: tbl.get(13).replace(lambda row:None)
      js: tbl.get(13).replace(function(row) { return null; })
      rb: tbl.get(13).replace{ |row| nil }
      ot: ({'deleted':1})

    # Replace selection of table

    # Between is buggy on the CPP server right now and this doesn't work
    #- py: "tbl.between(10, 20).replace(lambda row: {'a':row['id']})"
    #  js: "tbl.between(10, 20).replace(function(row) { return {'a':row('id')}; })"
    #  ot: ({'replaced':9, 'unchanged':1})

    - py: tbl.filter(lambda row:(row['id'] >= 10) & (row['id'] < 20)).replace(lambda row:{'id':row['id'], 'a':row['id']})
      js: tbl.filter(function(row) { return row('id').ge(10).and(row('id').lt(20))}).replace(function(row) { return {'id':row('id'), 'a':row('id')}; })
      rb: tbl.filter{ |row|
            (row[:id] >= 10).and(row[:id] < 20)
          }.replace{ |row|
            { :id => row[:id], :a => row[:id] } }
      ot: ({'replaced':8, 'unchanged':1})

    # Replace whole table

    - py: tbl.replace(lambda row:None)
      js: tbl.replace(function(row) { return null; })
      rb: tbl.replace{ |row| nil }
      ot: ({'deleted':99})

    # clean up
    - cd: r.db('test').table_drop('test')
      ot: "({'dropped':1})"
    - cd: r.db('test').table_drop('test2')
      ot: "({'dropped':1})"
